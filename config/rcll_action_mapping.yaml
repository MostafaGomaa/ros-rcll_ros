# = Action mappings =
# ROSPlan PDDL operators to Lua-based Behavior Engine skills.
#
# In order to execute actions dispatched by ROSPlan, we need to establish
# a mapping from PDDL actions and their arguments to skills. This is done
# through a set of configuration parameters, which are defined with the
# configuration key indicating the PDDL operator name, and a conversion
# string. Note that the mapping depends on
#  1. the PDDL domain description and its respective actions
#     (durative and non-durative)
#  2. the available skills through the Behavior Engine
#     (skill-set depends on platform and domain used).
#
# The mapping can use the following elements as a pattern modification for
# the skill string.
# Note: parameters are always converted to lower-case by ROSPlan (at least
#       in the default combination with POPF).
#
# Variable substitution has the general pattern ?(varname)M, where varname
# is the name of the operator parameter and M a modifier. The modifier must
# be one of:
#  - s or S: convert value to string, that is add qutotation marks around
#            the value. s passes the string as is, S converts to uppercase.
#  - y or Y: pass value as symbol, i.e., the string value as is without
#            quotation marks. Y additionally converts to upper case.
#  - i:      converts the value to an integer
#  - f:      converts the value to a float value
#
# Additionally, the arguments may be modified with a chain of regular
# expressions. Then, the expression looks like this:
# ?(var|/pattern/replace/|...)
# There can be an arbitrary number of regular expressions chained by the
# pipe (|) symbol. The "/pattern/replace/" can be a regular expression
# according to the C++ ECMAScript syntax.
# NOTE: the expressions may contain neither a slash (/) nor a pipe
# (|), not even if quoted with a backslash. This is because a rather
# simple pattern is used to extract the regex from the argument string.
# The replacement string may contain reference to matched groups
# (cf. http://ecma-international.org/ecma-262/5.1/#sec-15.5.4.11). In
# particular, the following might be useful:
#  - $$: an actual dollar sign
#  - $&: the full matched substring
#  - $n: the n'th capture (may also be $nn for 10 <= nn <= 99)
# Note that regular expression matching is performed case-insensitive, that
# is because PDDL itself is also case-insensitive.
# 
#
# == Examples ==
# Examples contain three elements, the typed PDDL operator name with
# parameters, the conversion string, and one or more conversion examples
# of grounded actions to actuall skill strings.
#
# PDDL:  (move ?r - robot ?from ?to - location)
# Param: move: ppgoto{place=?(to)S}
# Examples: (move R-1 START C-BS-I) -> ppgoto{place="C-BS-I"}
#
# PDDL: (enter_field ?r - robot ?team-color - team-color)
# Param: enter_field: drive_into_field{team=?(team-color)S, wait=?(r|/R-1/0.0/|/R-2/3.0/|/R-3/6.0/)f}
# Examples: (enter_field R-1 CYAN) -> drive_into_field{team="CYAN", wait=0.000000}
#           (enter_field R-2 CYAN) -> drive_into_field{team="CYAN", wait=3.000000}
# Note: the chaining of regular expressions to fill in a parameter based on
# the specific value of another parameter. You can also see that arguments
# can be referenced more than once.

action_mappings:
  move: ppgoto{place=?(to)S}
  enter_field: drive_into_field{team=?(team-color)S, wait=?(r|/r-1/0.0/|/r-2/3.0/|/r-3/6.0/)f}
  hello_world: say{text="Hello World", wait=true}
