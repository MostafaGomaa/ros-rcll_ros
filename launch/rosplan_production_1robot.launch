<?xml version="1.0"?>

<launch>
	<!-- Basic Simulation Integration -->
	<include file="$(find rcll_fawkes_sim)/launch/rcll_fawkes_sim_all_1robot.launch" />

	<!-- domain file -->
	<param name="/rosplan/domain_path" value="$(find rcll_ros)/pddl/rcll_domain_production.pddl" />

	<!-- knowledge base -->
	<node name="rosplan_knowledge_base" pkg="rosplan_knowledge_base" type="knowledgeBase" respawn="false" output="screen">
	</node>

	<!-- scene database (MongoDB) -->
	<node name="rosplan_scene_database" pkg="mongodb_store" type="mongodb_server.py" respawn="false" output="log">
		<param name="database_path" value="$(find rosplan_knowledge_base)/common/mongoDB/" />
	</node>
	<node name="rosplan_scene_message_store" pkg="mongodb_store" type="message_store_node.py" respawn="false" output="log" />

	<!-- planning system -->
	<node name="rosplan_planning_system" pkg="rosplan_planning_system" type="planner" respawn="false" output="screen">
		<!-- directory for generated files -->
		<param name="data_path" value="$(find rcll_ros)/data/" />
		<param name="problem_path" value="$(find rcll_ros)/data/problem.pddl" />
		<param name="strl_file_path" value="$(find rcll_ros)/data/plan.strl" />

		<!-- to run the planner -->
		<param name="planner_command" value="timeout 30 $(find rosplan_planning_system)/common/bin/popf -n DOMAIN PROBLEM" />
		<param name="generate_default_problem" value="true" />
		<param name="max_dispatch_attempts" value="2" />
	</node>

	<!-- Load domain-specific action mapping -->
  <rosparam command="load" file="$(find rcll_ros)/config/rcll_action_mapping.yaml" />

  <!-- Load predicates which the interface should not touch (assert/retract) -->
  <rosparam command="load" file="$(find rcll_ros)/config/rcll_produce_c0_ignored_effect_predicates.yaml" />

  <!-- Parameter of action used to identify robot-specific actions -->
	<param name="robot_identifier/var_name" value="r" />
  <param name="robot_identifier/var_type" value="robot" />

	<node name="rosplan_interface_behaviorengine" pkg="rosplan_interface_behaviorengine"
        type="rosplan_interface_behaviorengine" respawn="false" output="screen">
	  <remap from="skiller" to="robot1/skiller" />
    <param name="robot_identifier/var_value" value="r-1" />
  </node>

  <node name="rosplan_interface_rcllrefbox" pkg="rosplan_interface_rcllrefbox"
        type="rosplan_interface_rcllrefbox" respawn="false" output="screen">
		<remap from="rcll/send_prepare_machine" to="/robot1/rcll/send_prepare_machine" />
	  <rosparam command="load" file="$(find rcll_ros)/config/rcll_produce_c0_ifc_rcllrefbox.yaml" />
	</node>

	<node name="rosplan_kbupdater_machine_info" pkg="rosplan_interface_rcllrefbox"
        type="rosplan_kb_updater_rcll_machine_info" respawn="false" output="screen">
		<remap from="rcll/machine_info" to="/robot1/rcll/machine_info" />
		<remap from="rcll/ring_info" to="/robot1/rcll/ring_info" />
	  <rosparam command="load" file="$(find rcll_ros)/config/rcll_prepare_kbupdater_machine_info.yaml" />
	</node>

	<!--
	<node name="rosplan_kbupdater_order_info" pkg="rosplan_interface_rcllrefbox"
        type="rosplan_kb_updater_rcll_order_info" respawn="false" output="screen">
		<remap from="rcll/order_info" to="/robot1/rcll/order_info" />
	  <rosparam command="load" file="$(find rcll_ros)/config/rcll_produce_c0_kbupdater_order_info.yaml" />
	</node> -->

  <node name="rosplan_initial_situation" pkg="rosplan_initial_situation"
        type="rosplan_initial_situation" respawn="false" output="screen">
	  <rosparam command="load" file="$(find rcll_ros)/config/rcll_production_initial_situation.yaml" />
		<param name="clear_kb" value="true" />
		<param name="start_planning" value="false" />
	</node>
</launch>
